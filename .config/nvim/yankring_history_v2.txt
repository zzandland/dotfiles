hooks/*,v
!/.calcurse/hooks/*,V
caldav/*,v
!/.calcurse/caldav/*,V
/.calcurse/caldav/oauth2_cred,V
!,v
+,v
+        statusnode = node.find("./D:status", namespaces=nsmap)+        if statusnode is not None:+            status = re.match(r'HTTP.*(\d\d\d)', statusnode.text)+            if status is None:+                die_atnode('Could not parse status.', node)+            statuscode = status.group(1)+            if statuscode == '404':+                print('Skipping missing item: {}'.format(href))+                continue,v
#!/usr/bin/env python3import argparseimport base64import configparserimport osimport reimport subprocessimport sysimport textwrapimport urllib.parseimport xml.etree.ElementTree as etreeimport httplib2# Optional libraries for OAuth2 authenticationtry:    from oauth2client.client import OAuth2WebServerFlow, HttpAccessTokenRefreshError    from oauth2client.file import Storage    import webbrowserexcept ModuleNotFoundError:    passdef msgfmt(msg, prefix=''):    lines = []    for line in msg.splitlines():        lines += textwrap.wrap(line, 80 - len(prefix))    return '\n'.join([prefix + line for line in lines])def warn(msg):    print(msgfmt(msg, "warning: "))def die(msg):    sys.exit(msgfmt(msg, "error: "))def check_dir(dir):    if not os.path.isdir(dir):        die("invalid directory: {0}".format(dir))def die_atnode(msg, node):    if debug:        msg += '\n\n'        msg += 'The error occurred while processing the following XML node:\n'        msg += etree.tostring(node).decode('utf-8')    die(msg)def validate_sync_filter():    valid_sync_filter_values = {        'event', 'apt', 'recur-event', 'recur-apt', 'todo', 'recur', 'cal'    }    return set(sync_filter.split(',')) - valid_sync_filter_valuesdef calcurse_wipe():    if verbose:        print('Removing all local calcurse objects...')    if dry_run:        return    command = calcurse + ['-F', '--filter-hash=XXX']    if debug:        print('Running command: {}'.format(command))    subprocess.call(command)def calcurse_import(icaldata):    command = calcurse + [        '-i', '-', '--dump-imported', '-q', '--format-apt=%(hash)\\n',        '--format-recur-apt=%(hash)\\n', '--format-event=%(hash)\\n',        '--format-recur-event=%(hash)\\n', '--format-todo=%(hash)\\n'    ]    if debug:        print('Running command: {}'.format(command))    p = subprocess.Popen(command,                         stdin=subprocess.PIPE,                         stdout=subprocess.PIPE)    return p.communicate(icaldata.encode('utf-8'))[0].decode('utf-8').rstrip()def calcurse_export(objhash):    command = calcurse + ['-xical', '--export-uid', '--filter-hash=' + objhash]    if debug:        print('Running command: {}'.format(command))    p = subprocess.Popen(command, stdout=subprocess.PIPE)    return p.communicate()[0].decode('utf-8').rstrip()def calcurse_hashset():    command = calcurse + [        '-G', '--filter-type', sync_filter, '--format-apt=%(hash)\\n',        '--format-recur-apt=%(hash)\\n', '--format-event=%(hash)\\n',        '--format-recur-event=%(hash)\\n', '--format-todo=%(hash)\\n'    ]    if debug:        print('Running command: {}'.format(command))    p = subprocess.Popen(command, stdout=subprocess.PIPE)    return set(p.communicate()[0].decode('utf-8').rstrip().splitlines())def calcurse_remove(objhash):    command = calcurse + ['-F', '--filter-hash=!' + objhash]    if debug:        print('Running command: {}'.format(command))    subprocess.call(command)def calcurse_version():    command = calcurse + ['--version']    if debug:        print('Running command: {}'.format(command))    p = subprocess.Popen(command, stdout=subprocess.PIPE)    m = re.match(r'calcurse ([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9]+)-)?',                 p.communicate()[0].decode('utf-8'))    if not m:        return None    return tuple([int(group) for group in m.groups(0)])def get_auth_headers():    if not username or not password:        return {}    user_password = ('{}:{}'.format(username, password)).encode('ascii')    user_password = base64.b64encode(user_password).decode('ascii')    headers = {'Authorization': 'Basic {}'.format(user_password)}    return headersdef init_auth(client_id, client_secret, scope, redirect_uri, authcode):    # Create OAuth2 session    oauth2_client = OAuth2WebServerFlow(client_id=client_id,                                        client_secret=client_secret,                                        scope=scope,                                        redirect_uri=redirect_uri)    # If auth code is missing, tell user run script with auth code    if not authcode:        # Generate and open URL for user to authorize        auth_uri = oauth2_client.step1_get_authorize_url()        webbrowser.open(auth_uri)        prompt = ('\nIf a browser window did not open, go to the URL '                  'below and log in to authorize syncing. '                  'Once authorized, pass the string after "code=" from '                  'the URL in your browser\'s address bar to '                  'calcurse-caldav.py using the "--authcode" flag. '                  "Example: calcurse-caldav --authcode "                  "'your_auth_code_here'\n\n{}\n".format(auth_uri))        print(prompt)        die("Access token is missing or refresh token is expired.")    # Create and return Credential object from auth code    credentials = oauth2_client.step2_exchange(authcode)    # Setup storage file and store credentials    storage = Storage(oauth_file)    credentials.set_store(storage)    storage.put(credentials)    return credentialsdef run_auth(authcode):    # Check if credentials file exists    if os.path.isfile(oauth_file):        # Retrieve token from file        storage = Storage(oauth_file)        credentials = storage.get()        # Set file to store it in for future functions        credentials.set_store(storage)        # Refresh the access token if it is expired        if credentials.invalid:            try:                credentials.refresh(httplib2.Http())            except HttpAccessTokenRefreshError:                # Initialize OAuth2 again if refresh token becomes invalid                credentials = init_auth(client_id, client_secret, scope,                                        redirect_uri, authcode)    else:        # Initialize OAuth2 credentials        credentials = init_auth(client_id, client_secret, scope, redirect_uri,                                authcode)    return credentialsdef remote_query(conn, cmd, path, additional_headers, body):    headers = custom_headers.copy()    headers.update(get_auth_headers())    if cmd == 'PUT':        headers['Content-Type'] = 'text/calendar; charset=utf-8'    else:        headers['Content-Type'] = 'application/xml; charset=utf-8'    headers.update(additional_headers)    if debug:        print("> {} {}".format(cmd, path))        headers_sanitized = headers.copy()        if not debug_raw:            headers_sanitized.pop('Authorization', None)        print("> Headers: " + repr(headers_sanitized))        if body:            for line in body.splitlines():                print("> " + line)        print()    if isinstance(body, str):        body = body.encode('utf-8')    resp, body = conn.request(path, cmd, body=body, headers=headers)    body = body.decode('utf-8')    if not resp:        return (None, None)    if debug:        print("< Status: {} ({})".format(resp.status, resp.reason))        print("< Headers: " + repr(resp))        for line in body.splitlines():            print("< " + line)        print()    if resp.status - (resp.status % 100) != 200:        die(("The server at {} replied with HTTP status code {} ({}) " +             "while trying to access {}.").format(hostname, resp.status,                                                  resp.reason, path))    return (resp, body)def get_etags(conn, hrefs=[]):    if len(hrefs) > 0:        headers = {}        body = ('<?xml version="1.0" encoding="utf-8" ?>'                '<C:calendar-multiget xmlns:D="DAV:" '                '                     xmlns:C="urn:ietf:params:xml:ns:caldav">'                '<D:prop><D:getetag /></D:prop>')        for href in hrefs:            body += '<D:href>{}</D:href>'.format(href)        body += '</C:calendar-multiget>'    else:        headers = {'Depth': '1'}        body = ('<?xml version="1.0" encoding="utf-8" ?>'                '<C:calendar-query xmlns:D="DAV:" '                '                  xmlns:C="urn:ietf:params:xml:ns:caldav">'                '<D:prop><D:getetag /></D:prop>'                '<C:filter><C:comp-filter name="VCALENDAR" /></C:filter>'                '</C:calendar-query>')    headers, body = remote_query(conn, "REPORT", absolute_uri, headers, body)    if not headers:        return {}    root = etree.fromstring(body)    etagdict = {}    for node in root.findall(".//D:response", namespaces=nsmap):        etagnode = node.find("./D:propstat/D:prop/D:getetag", namespaces=nsmap)        if etagnode is None:            die_atnode('Missing ETag.', node)        etag = etagnode.text.strip('"')        hrefnode = node.find("./D:href", namespaces=nsmap)        if hrefnode is None:            die_atnode('Missing href.', node)        href = hrefnode.text        etagdict[href] = etag    return etagdictdef remote_wipe(conn):    if verbose:        print('Removing all objects from the CalDAV server...')    if dry_run:        return    remote_items = get_etags(conn)    for href in remote_items:        remove_remote_object(conn, remote_items[href], href)def get_syncdb(fn):    if not os.path.exists(fn):        return {}    if verbose:        print('Loading synchronization database from ' + fn + '...')    syncdb = {}    with open(fn, 'r') as f:        for line in f.readlines():            href, etag, objhash = line.rstrip().split(' ')            syncdb[href] = (etag, objhash)    return syncdbdef syncdb_add(syncdb, href, etag, objhash):    syncdb[href] = (etag, objhash)    if debug:        print('New sync database entry: {} {} {}'.format(href, etag, objhash))def syncdb_remove(syncdb, href):    syncdb.pop(href, None)    if debug:        print('Removing sync database entry: {}'.format(href))def save_syncdb(fn, syncdb):    if verbose:        print('Saving synchronization database to ' + fn + '...')    if dry_run:        return    with open(fn, 'w') as f:        for href, (etag, objhash) in syncdb.items():            print("{} {} {}".format(href, etag, objhash), file=f)def push_object(conn, objhash):    href = path + objhash + ".ics"    body = calcurse_export(objhash)    headers, body = remote_query(conn, "PUT", hostname_uri + href, {}, body)    if not headers:        return None    etag = None    headerdict = dict(headers)    if 'etag' in headerdict:        etag = headerdict['etag']    while not etag:        etagdict = get_etags(conn, [href])        if etagdict:            etag = next(iter(etagdict.values()))    etag = etag.strip('"')    return (urllib.parse.quote(href), etag)def push_objects(objhashes, conn, syncdb, etagdict):    # Copy new objects to the server.    added = 0    for objhash in objhashes:        if verbose:            print("Pushing new object {} to the server.".format(objhash))        if dry_run:            continue        href, etag = push_object(conn, objhash)        syncdb_add(syncdb, href, etag, objhash)        added += 1    return addeddef remove_remote_object(conn, etag, href):    headers = {'If-Match': '"' + etag + '"'}    remote_query(conn, "DELETE", hostname_uri + href, headers, None)def remove_remote_objects(objhashes, conn, syncdb, etagdict):    # Remove locally deleted objects from the server.    deleted = 0    for objhash in objhashes:        queue = []        for href, entry in syncdb.items():            if entry[1] == objhash:                queue.append(href)        for href in queue:            etag = syncdb[href][0]            if etagdict[href] != etag:                warn(('{} was deleted locally but modified in the CalDAV '                      'calendar. Keeping the modified version on the server. '                      'Run the script again to import the modified '                      'object.').format(objhash))                syncdb_remove(syncdb, href)                continue            if verbose:                print("Removing remote object {} ({}).".format(etag, href))            if dry_run:                continue            remove_remote_object(conn, etag, href)            syncdb_remove(syncdb, href)            deleted += 1    return deleteddef pull_objects(hrefs_missing, hrefs_modified, conn, syncdb, etagdict):    if not hrefs_missing and not hrefs_modified:        return 0    # Download and import new objects from the server.    body = ('<?xml version="1.0" encoding="utf-8" ?>'            '<C:calendar-multiget xmlns:D="DAV:" '            '                     xmlns:C="urn:ietf:params:xml:ns:caldav">'            '<D:prop><D:getetag /><C:calendar-data /></D:prop>')    for href in (hrefs_missing | hrefs_modified):        body += '<D:href>{}</D:href>'.format(href)    body += '</C:calendar-multiget>'    headers, body = remote_query(conn, "REPORT", absolute_uri, {}, body)    root = etree.fromstring(body)    added = 0    for node in root.findall(".//D:response", namespaces=nsmap):        hrefnode = node.find("./D:href", namespaces=nsmap)        if hrefnode is None:            die_atnode('Missing href.', node)        href = hrefnode.text        statusnode = node.find("./D:status", namespaces=nsmap)        if statusnode is not None:            status = re.match(r'HTTP.*(\d\d\d)', statusnode.text)            if status is None:                die_atnode('Could not parse status.', node)            statuscode = status.group(1)            if statuscode == '404':                print('Skipping missing item: {}'.format(href))                continue        etagnode = node.find("./D:propstat/D:prop/D:getetag", namespaces=nsmap)        if etagnode is None:            die_atnode('Missing ETag.', node)        etag = etagnode.text.strip('"')        cdatanode = node.find("./D:propstat/D:prop/C:calendar-data",                              namespaces=nsmap)        if cdatanode is None:            die_atnode('Missing calendar data.', node)        cdata = cdatanode.text        if href in hrefs_modified:            if verbose:                print("Replacing object {}.".format(etag))            if dry_run:                continue            objhash = syncdb[href][1]            calcurse_remove(objhash)        else:            if verbose:                print("Importing new object {}.".format(etag))            if dry_run:                continue        objhash = calcurse_import(cdata)        # TODO: Add support for importing multiple events at once, see GitHub        # issue #20 for details.        if re.match(r'[0-ga-f]+$', objhash):            syncdb_add(syncdb, href, etag, objhash)            added += 1        else:            print("Failed to import object: {} ({})".format(etag, href),                  file=sys.stderr)    return addeddef remove_local_objects(hrefs, conn, syncdb, etagdict):    # Delete objects that no longer exist on the server.    deleted = 0    for href in hrefs:        etag, objhash = syncdb[href]        if verbose:            print("Removing local object {}.".format(objhash))        if dry_run:            continue        calcurse_remove(objhash)        syncdb_remove(syncdb, href)        deleted += 1    return deleteddef run_hook(name):    hook_path = hookdir + '/' + name    if not os.path.exists(hook_path):        return    subprocess.call(hook_path, shell=True)# Initialize the XML namespace map.nsmap = {"D": "DAV:", "C": "urn:ietf:params:xml:ns:caldav"}# Initialize default values.configfn = os.path.expanduser("~/.calcurse/caldav/config")lockfn = os.path.expanduser("~/.calcurse/caldav/lock")syncdbfn = os.path.expanduser("~/.calcurse/caldav/sync.db")hookdir = os.path.expanduser("~/.calcurse/caldav/hooks/")oauth_file = os.path.expanduser("~/.calcurse/caldav/oauth2_cred")# Parse command line arguments.parser = argparse.ArgumentParser('calcurse-caldav')parser.add_argument('--init',                    action='store',                    dest='init',                    default=None,                    choices=['keep-remote', 'keep-local', 'two-way'],                    help='initialize the sync database')parser.add_argument('--config',                    action='store',                    dest='configfn',                    default=configfn,                    help='path to the calcurse-caldav configuration')parser.add_argument('--datadir',                    action='store',                    dest='datadir',                    default=None,                    help='path to the calcurse data directory')parser.add_argument('--lockfile',                    action='store',                    dest='lockfn',                    default=lockfn,                    help='path to the calcurse-caldav lock file')parser.add_argument('--syncdb',                    action='store',                    dest='syncdbfn',                    default=syncdbfn,                    help='path to the calcurse-caldav sync DB')parser.add_argument('--hookdir',                    action='store',                    dest='hookdir',                    default=hookdir,                    help='path to the calcurse-caldav hooks directory')parser.add_argument('--authcode',                    action='store',                    dest='authcode',                    default=None,                    help='auth code for OAuth2 authentication')parser.add_argument('-v',                    '--verbose',                    action='store_true',                    dest='verbose',                    default=False,                    help='print status messages to stdout')parser.add_argument('--debug',                    action='store_true',                    dest='debug',                    default=False,                    help='print debug messages to stdout')parser.add_argument('--debug-raw',                    action='store_true',                    dest='debug_raw',                    default=False,                    help='do not sanitize debug messages')args = parser.parse_args()init = args.init is not Noneconfigfn = args.configfnlockfn = args.lockfnsyncdbfn = args.syncdbfndatadir = args.datadirhookdir = args.hookdirauthcode = args.authcodeverbose = args.verbosedebug = args.debugdebug_raw = args.debug_raw# Read environment variablespassword = os.getenv('CALCURSE_CALDAV_PASSWORD')# Read configuration.config = configparser.RawConfigParser()if verbose:    print('Loading configuration from ' + configfn + '...')try:    config.read_file(open(configfn))except FileNotFoundError as e:    die('Configuration file not found: {}'.format(configfn))if config.has_option('General', 'InsecureSSL'):    insecure_ssl = config.getboolean('General', 'InsecureSSL')else:    insecure_ssl = False# Read config for "HTTPS" option (default=True)if config.has_option('General', 'HTTPS'):    https = config.getboolean('General', 'HTTPS')else:    https = Trueif config.has_option('General', 'Binary'):    calcurse = [config.get('General', 'Binary')]else:    calcurse = ['calcurse']if datadir:    check_dir(datadir)    calcurse += ['-D', datadir]if config.has_option('General', 'DryRun'):    dry_run = config.getboolean('General', 'DryRun')else:    dry_run = Trueif not verbose and config.has_option('General', 'Verbose'):    verbose = config.getboolean('General', 'Verbose')if not debug and config.has_option('General', 'Debug'):    debug = config.getboolean('General', 'Debug')if config.has_option('General', 'AuthMethod'):    authmethod = config.get('General', 'AuthMethod').lower()else:    authmethod = 'basic'if config.has_option('General', 'SyncFilter'):    sync_filter = config.get('General', 'SyncFilter')    invalid_filter_values = validate_sync_filter()    if len(invalid_filter_values):        die('Invalid value(s) in SyncFilter option: ' +            ', '.join(invalid_filter_values))else:    sync_filter = 'cal,todo'if config.has_option('Auth', 'UserName'):    username = config.get('Auth', 'UserName')else:    username = Noneif config.has_option('Auth', 'Password') and not password:    password = config.get('Auth', 'Password')if config.has_section('CustomHeaders'):    custom_headers = dict(config.items('CustomHeaders'))else:    custom_headers = {}if config.has_option('OAuth2', 'ClientID'):    client_id = config.get('OAuth2', 'ClientID')else:    client_id = Noneif config.has_option('OAuth2', 'ClientSecret'):    client_secret = config.get('OAuth2', 'ClientSecret')else:    client_secret = Noneif config.has_option('OAuth2', 'Scope'):    scope = config.get('OAuth2', 'Scope')else:    scope = Noneif config.has_option('OAuth2', 'RedirectURI'):    redirect_uri = config.get('OAuth2', 'RedirectURI')else:    redirect_uri = 'http://127.0.0.1'# Change URl prefix according to HTTP/HTTPSif https:    urlprefix = "https://"else:    urlprefix = "http://"hostname = config.get('General', 'HostName')path = '/' + config.get('General', 'Path').strip('/') + '/'hostname_uri = urlprefix + hostnameabsolute_uri = hostname_uri + path# Show disclaimer when performing a dry run.if dry_run:    warn(('Dry run; nothing is imported/exported. Add "DryRun = No" to the '          '[General] section in the configuration file to enable '          'synchronization.'))# Check whether the specified calcurse binary is executable and compatible.ver = calcurse_version()if ver is None:    die('Invalid calcurse binary. Make sure that the file specified in ' +        'the configuration is a valid and up-to-date calcurse binary.')elif ver < (4, 0, 0, 96):    die('Incompatible calcurse binary detected. Version >=4.1.0 is required ' +        'to synchronize with CalDAV servers.')# Run the pre-sync hook.run_hook('pre-sync')# Create lock file.if os.path.exists(lockfn):    die('Leftover lock file detected. If there is no other synchronization ' +        'instance running, please remove the lock file manually and try ' +        'again.')open(lockfn, 'w')try:    # Connect to the server.    if verbose:        print('Connecting to ' + hostname + '...')    conn = httplib2.Http()    if insecure_ssl:        conn.disable_ssl_certificate_validation = True    if authmethod == 'oauth2':        # Authenticate with OAuth2 and authorize HTTP object        cred = run_auth(authcode)        conn = cred.authorize(conn)    elif authmethod == 'basic':        # Add credentials to httplib2        conn.add_credentials(username, password)    else:        die('Invalid option for AuthMethod in config file. Use "basic" or "oauth2"'            )    if init:        # In initialization mode, start with an empty synchronization database.        if args.init == 'keep-remote':            calcurse_wipe()        elif args.init == 'keep-local':            remote_wipe(conn)        syncdb = {}    else:        # Read the synchronization database.        syncdb = get_syncdb(syncdbfn)        if not syncdb:            die('Sync database not found or empty. Please initialize the ' +                'database first.\n\nSupported initialization modes are:\n' +                '  --init=keep-remote Remove all local calcurse items\n' +                '  --init=keep-local  Remove all remote objects\n' +                '  --init=two-way     Copy local items to the server and vice versa'                )    # Query the server and compute a lookup table that maps each path to its    # current ETag.    etagdict = get_etags(conn)    # Compute object diffs.    missing = set()    modified = set()    for href in set(etagdict.keys()):        if href not in syncdb:            missing.add(href)        elif etagdict[href] != syncdb[href][0]:            modified.add(href)    orphan = set(syncdb.keys()) - set(etagdict.keys())    objhashes = calcurse_hashset()    new = objhashes - set([entry[1] for entry in syncdb.values()])    gone = set([entry[1] for entry in syncdb.values()]) - objhashes    # Retrieve new objects from the server.    local_new = pull_objects(missing, modified, conn, syncdb, etagdict)    # Delete local items that no longer exist on the server.    local_del = remove_local_objects(orphan, conn, syncdb, etagdict)    # Push new objects to the server.    remote_new = push_objects(new, conn, syncdb, etagdict)    # Remove items from the server if they no longer exist locally.    remote_del = remove_remote_objects(gone, conn, syncdb, etagdict)    # Write the synchronization database.    save_syncdb(syncdbfn, syncdb)    #Clear OAuth2 credentials if used    if authmethod == 'oauth2':        conn.clear_credentials()finally:    # Remove lock file.    os.remove(lockfn)# Run the post-sync hook.run_hook('post-sync')# Print a summary to stdout.print("{} items imported, {} items removed locally.".format(    local_new, local_del))print("{} items exported, {} items removed from the server.".format(    remote_new, remote_del)),V
,V
/caldav/v2/zzandland%40gmail.com/events/0tb61cu1e5jcgpujq5ndo,V
/caldav/v2/zzandland%40gmail.com/events/0tb61cu1e5jcgpujq5ndo,v
08/05/2016 [1] {1D -> 08/07/2016} >271b73e451d327d95cdf74355b3bef6b0ea52b52 Stay at 7 祇園芸者徒歩5分You deposit luggage Free07/21/2019 [1] {1D -> 07/26/2019} Triplebyte Superweek07/24/2019 [1] {1D -> 07/26/2019} >bacd5e35417ba142a6491c319a5b3044df2e2c5a Stay at Sheraton Fisherman's Wharf Hotel08/27/2019 [1] {1D -> 09/03/2019} >7f52d65d9deea98275743de3706b59a4d1e75875 Stay at Holiday Inn San Francisco-Fishermans Wharf06/03/2012 @ 11:00 -> 06/03/2012 @ 12:00 {1Y} !수연이형 생신01/11/2016 @ 10:00 -> 01/11/2016 @ 12:00 {1W -> 04/11/2016 !02/15/2016 !04/11/2016} !HMB202 Lec01/11/2016 @ 13:00 -> 01/11/2016 @ 14:00 {1W -> 04/11/2016 !02/15/2016 !04/11/2016} !HMB202 Lab01/12/2016 @ 13:00 -> 01/12/2016 @ 14:00 {1W -> 04/12/2016 !02/16/2016 !02/18/2016 !04/12/2016} !BIO220 Lec01/12/2016 @ 14:00 -> 01/12/2016 @ 15:00 {1W -> 04/12/2016 !02/16/2016 !02/18/2016 !03/03/2016 !04/12/2016} !CSB351 Lec01/12/2016 @ 18:00 -> 01/12/2016 @ 21:00 {1W -> 04/12/2016 !02/16/2016 !04/12/2016} !CSB349 Lec01/13/2016 @ 14:00 -> 01/13/2016 @ 16:00 {1W -> 04/06/2016 !02/17/2016 !02/24/2016} !CSB349 Tut01/28/2016 @ 18:30 -> 01/28/2016 @ 21:00 {2W -> 04/07/2016} !BIO220 Lab10/01/2018 @ 16:45 -> 10/01/2018 @ 17:00 {1W -> 10/07/2018} >c76052b6c785d2a65801c236d55f2d8fb95e4726 !David Goal Setting10/08/2018 @ 16:45 -> 10/08/2018 @ 17:00 {1W -> 10/28/2018} >bc94124f3df9f00df64f1229ffa24577a1522d76 !David Goal Setting10/29/2018 @ 16:45 -> 10/29/2018 @ 17:00 {1W -> 11/04/2018} >52807ac04538feb775e6d45100798f687ea6acbd !David Goal Setting11/05/2018 @ 16:45 -> 11/05/2018 @ 17:00 {1W -> 11/25/2018} >c6138cbd3c817ed29e9f0a416e6f6cdf085ede84 !David Goal Setting11/05/2018 @ 16:45 -> 11/05/2018 @ 17:00 {1W -> 12/09/2018} >c6138cbd3c817ed29e9f0a416e6f6cdf085ede84 !David Goal Setting11/26/2018 @ 16:45 -> 11/26/2018 @ 17:00 {1W -> 12/09/2018} >acbeb518900b39480caf4e3ec06a927daee6330f !David Goal Setting05/12/2014 @ 15:00 -> 05/12/2014 @ 16:00!09/29/2014 @ 11:20 -> 09/29/2014 @ 12:20!Nfs28410/02/2014 @ 08:00 -> 10/02/2014 @ 09:00!Imaginate GM10/07/2014 @ 17:00 -> 10/07/2014 @ 19:00!Bch21010/09/2014 @ 19:00 -> 10/09/2014 @ 20:00!10/15/2014 @ 15:00 -> 10/15/2014 @ 17:00!Bio27010/16/2014 @ 18:00 -> 10/16/2014 @ 20:00!Csb32710/21/2014 @ 15:10 -> 10/21/2014 @ 16:20!Hmb26510/24/2014 @ 12:00 -> 10/24/2014 @ 13:00!Lunch with David11/03/2014 @ 11:00 -> 11/03/2014 @ 12:00!Nfs28411/04/2014 @ 17:00 -> 11/04/2014 @ 19:00!Bch21011/13/2014 @ 16:00 -> 11/13/2014 @ 18:00!Csb32712/08/2014 @ 09:00 -> 12/08/2014 @ 11:00!Nfs28412/08/2014 @ 19:00 -> 12/08/2014 @ 21:00!Bio27012/11/2014 @ 19:00 -> 12/11/2014 @ 22:00!Bch21012/15/2014 @ 09:00 -> 12/15/2014 @ 11:00!Csb32712/16/2014 @ 14:00 -> 12/16/2014 @ 16:00!Hmb26502/05/2015 @ 18:00 -> 02/05/2015 @ 19:30!Bch31102/10/2015 @ 08:00 -> 02/10/2015 @ 09:00!AO Toronto Chapter02/18/2015 @ 08:00 -> 02/18/2015 @ 09:00!정안 생일02/19/2015 @ 08:00 -> 02/19/2015 @ 09:00!02/22/2015 @ 08:00 -> 02/22/2015 @ 09:00!Guthrie govan03/05/2015 @ 18:00 -> 03/05/2015 @ 19:30!Bch31103/11/2015 @ 15:00 -> 03/11/2015 @ 17:00!BIO27103/23/2015 @ 08:00 -> 03/23/2015 @ 09:00!03/24/2015 @ 08:00 -> 03/24/2015 @ 09:00!Csb34603/24/2015 @ 08:00 -> 03/24/2015 @ 09:00!Csb34603/25/2015 @ 09:00 -> 03/25/2015 @ 11:00!Imm25004/09/2015 @ 09:00 -> 04/09/2015 @ 12:00!BCH311H1S04/20/2015 @ 09:00 -> 04/20/2015 @ 11:00!IMM250H104/23/2015 @ 09:00 -> 04/23/2015 @ 11:00!CSB346H1S04/23/2015 @ 14:00 -> 04/23/2015 @ 17:00!EAS121H1S04/27/2015 @ 09:00 -> 04/27/2015 @ 11:00!BIO271H110/21/2015 @ 08:00 -> 10/21/2015 @ 09:00!CSB460H110/26/2015 @ 08:00 -> 10/26/2015 @ 09:00!NFS489H111/26/2015 @ 08:00 -> 11/26/2015 @ 09:00!CSB351Y1 12/09/2015 @ 08:00 -> 12/09/2015 @ 09:00!NFS489H112/11/2015 @ 08:00 -> 12/11/2015 @ 09:00!CSB460H112/17/2015 @ 13:30 -> 12/17/2015 @ 14:30!David 02/29/2016 @ 18:00 -> 02/29/2016 @ 19:00!AO Toronto Chapter03/07/2016 @ 18:00 -> 03/08/2016 @ 18:00!Bowlathon first committee meeting03/21/2016 @ 18:00 -> 03/21/2016 @ 19:00!AO Toronto Chapter04/25/2016 @ 08:00 -> 04/25/2016 @ 09:00!AO Toronto Chapter09/06/2016 @ 14:30 -> 09/06/2016 @ 15:30>271b73e451d327d95cdf74355b3bef6b0ea52b52 !Japanese and English Game Night (日本語・英語ゲームナイト)09/07/2016 @ 15:30 -> 09/07/2016 @ 16:30>271b73e451d327d95cdf74355b3bef6b0ea52b52 !Wednesday Learn Japanese: For English native/advanced speakers09/08/2016 @ 15:30 -> 09/08/2016 @ 17:30>271b73e451d327d95cdf74355b3bef6b0ea52b52 !Improve Conversational Japanese!! - for intermediate level only09/13/2016 @ 14:30 -> 09/13/2016 @ 15:30>271b73e451d327d95cdf74355b3bef6b0ea52b52 !Japanese and English Game Night (日本語・英語ゲームナイト)09/27/2016 @ 14:30 -> 09/27/2016 @ 15:30>271b73e451d327d95cdf74355b3bef6b0ea52b52 !Japanese and English Game Night (日本語・英語ゲームナイト)02/11/2017 @ 14:30 -> 02/11/2017 @ 15:30>271b73e451d327d95cdf74355b3bef6b0ea52b52 !Saturday Learn Japanese: For English native/advanced speakers02/22/2017 @ 15:30 -> 02/22/2017 @ 16:30>271b73e451d327d95cdf74355b3bef6b0ea52b52 !Wednesday Learn Japanese: For English native/advanced speakers02/23/2017 @ 15:30 -> 02/23/2017 @ 17:30>271b73e451d327d95cdf74355b3bef6b0ea52b52 !ゲームパーティー Game Night03/01/2017 @ 15:30 -> 03/01/2017 @ 16:30>271b73e451d327d95cdf74355b3bef6b0ea52b52 !Wednesday Learn Japanese: For English native/advanced speakers03/04/2017 @ 14:30 -> 03/04/2017 @ 15:30>271b73e451d327d95cdf74355b3bef6b0ea52b52 !Saturday Learn Japanese: For English native/advanced speakers03/08/2017 @ 15:30 -> 03/08/2017 @ 16:30>271b73e451d327d95cdf74355b3bef6b0ea52b52 !Wednesday Learn Japanese: For English native/advanced speakers03/08/2017 @ 18:30 -> 03/08/2017 @ 19:30>271b73e451d327d95cdf74355b3bef6b0ea52b52 !Karaoke Night03/18/2017 @ 15:00 -> 03/18/2017 @ 16:00>271b73e451d327d95cdf74355b3bef6b0ea52b52 !10 Yr Anniversary TJEX Social (EN)--event is not full, please join the waitlist!06/22/2017 @ 03:55 -> 06/22/2017 @ 05:58>271b73e451d327d95cdf74355b3bef6b0ea52b52 !Flight to Halifax (AC 1190)06/24/2017 @ 04:00 -> 06/24/2017 @ 05:07>271b73e451d327d95cdf74355b3bef6b0ea52b52 !Flight to Ottawa (WS 3510)06/24/2017 @ 05:45 -> 06/24/2017 @ 07:40>271b73e451d327d95cdf74355b3bef6b0ea52b52 !Flight to Halifax (WS 3482)07/04/2017 @ 04:15 -> 07/04/2017 @ 05:25>271b73e451d327d95cdf74355b3bef6b0ea52b52 !Flight to Montreal (AC 7952)07/04/2017 @ 06:25 -> 07/04/2017 @ 10:45>271b73e451d327d95cdf74355b3bef6b0ea52b52 !Flight to Port-au-Prince (AC 1814)07/13/2017 @ 12:05 -> 07/13/2017 @ 16:30>271b73e451d327d95cdf74355b3bef6b0ea52b52 !Flight to Montreal (AC 1815)07/14/2017 @ 09:30 -> 07/14/2017 @ 10:40>271b73e451d327d95cdf74355b3bef6b0ea52b52 !Flight to Toronto (AC 7963)09/20/2017 @ 15:00 -> 09/20/2017 @ 16:00>271b73e451d327d95cdf74355b3bef6b0ea52b52 !Calligraphy Meetup - September10/13/2017 @ 16:00 -> 10/13/2017 @ 17:00>271b73e451d327d95cdf74355b3bef6b0ea52b52 !Learn English Through Movies10/16/2017 @ 18:00 -> 10/16/2017 @ 22:00>271b73e451d327d95cdf74355b3bef6b0ea52b52 !Originals Ale House Karaoke01/04/2018 @ 20:00 -> 01/04/2018 @ 22:00!새로운애 과외01/05/2018 @ 19:00 -> 01/05/2018 @ 20:30!다혜 과외01/08/2018 @ 12:00 -> 01/08/2018 @ 14:00!누님 과외01/08/2018 @ 21:00 -> 01/08/2018 @ 22:30!다혜 과외01/09/2018 @ 16:00 -> 01/09/2018 @ 18:00!아현이 과외01/10/2018 @ 14:30 -> 01/10/2018 @ 16:30!누님 과외01/11/2018 @ 21:00 -> 01/11/2018 @ 22:30!다혜 과외01/13/2018 @ 12:00 -> 01/13/2018 @ 14:00!아현이 과외01/15/2018 @ 18:30 -> 01/15/2018 @ 20:30!누님 과외01/15/2018 @ 21:00 -> 01/15/2018 @ 22:30!다혜01/17/2018 @ 09:30 -> 01/17/2018 @ 11:30!은우씨 과외01/18/2018 @ 16:00 -> 01/18/2018 @ 18:00!새학생01/18/2018 @ 21:00 -> 01/18/2018 @ 22:30!다혜 과외01/19/2018 @ 09:30 -> 01/19/2018 @ 11:30!은우형01/20/2018 @ 09:00 -> 01/20/2018 @ 13:00!NTH 과외01/20/2018 @ 14:00 -> 01/20/2018 @ 17:00!아현이01/20/2018 @ 18:00 -> 01/20/2018 @ 19:30!다혜01/21/2018 @ 18:00 -> 01/21/2018 @ 21:00!다움이01/22/2018 @ 15:00 -> 01/22/2018 @ 18:00!누님01/22/2018 @ 21:00 -> 01/23/2018 @ 00:00!다움01/23/2018 @ 09:30 -> 01/23/2018 @ 11:30!은우형01/23/2018 @ 15:00 -> 01/23/2018 @ 17:00!누나01/23/2018 @ 18:30 -> 01/23/2018 @ 21:30!켐 랩01/23/2018 @ 21:30 -> 01/23/2018 @ 23:00!다혜 과외01/25/2018 @ 09:30 -> 01/25/2018 @ 11:30!은우형01/26/2018 @ 09:30 -> 01/26/2018 @ 11:30!은우형02/04/2018 @ 17:00 -> 02/04/2018 @ 18:00!아웃팅03/02/2018 @ 13:00 -> 03/02/2018 @ 14:00!금요03/11/2018 @ 13:00 -> 03/11/2018 @ 14:00!금요03/23/2018 @ 13:00 -> 03/23/2018 @ 14:00!금요03/30/2018 @ 13:00 -> 03/30/2018 @ 14:00!금요04/01/2018 @ 08:00 -> 04/01/2018 @ 10:00>271b73e451d327d95cdf74355b3bef6b0ea52b52 !Sunday meeting #6004/01/2018 @ 11:00 -> 04/01/2018 @ 13:00>80f5fb4141a92328914f6d8d992003d89803e2d1 !Sunday meeting #6004/01/2018 @ 17:00 -> 04/01/2018 @ 18:00!으웃팅04/06/2018 @ 14:00 -> 04/06/2018 @ 15:00!마르투04/18/2018 @ 15:00 -> 04/18/2018 @ 18:00>271b73e451d327d95cdf74355b3bef6b0ea52b52 !Calligraphy Meetup - April04/18/2018 @ 18:00 -> 04/18/2018 @ 21:00>bf43fafbbb6d1f57bc8c3e3a469e9afa736b47a8 !Calligraphy Meetup - April 04/20/2018 @ 14:00 -> 04/20/2018 @ 15:00!마르투04/28/2018 @ 12:00 -> 04/28/2018 @ 13:00!연습04/29/2018 @ 11:00 -> 04/29/2018 @ 12:00!마르투05/04/2018 @ 12:00 -> 05/04/2018 @ 13:00!천관웅 목사님05/12/2018 @ 12:00 -> 05/12/2018 @ 13:00!연습05/12/2018 @ 16:00 -> 05/12/2018 @ 17:00!일본팀 아웃팅05/13/2018 @ 16:00 -> 05/13/2018 @ 17:00!펀드레이징05/18/2018 @ 09:00 -> 05/18/2018 @ 10:00!마르투스05/19/2018 @ 09:00 -> 05/19/2018 @ 10:00!태준이형 05/21/2018 @ 18:00 -> 05/21/2018 @ 19:00!소수민족팀05/26/2018 @ 12:00 -> 05/26/2018 @ 13:00!연습05/27/2018 @ 12:00 -> 05/27/2018 @ 13:00!마르투스06/01/2018 @ 13:00 -> 06/01/2018 @ 14:00!마르투스06/02/2018 @ 13:00 -> 06/02/2018 @ 14:00!마르투스06/08/2018 @ 12:00 -> 06/08/2018 @ 13:00!마르투스06/09/2018 @ 13:00 -> 06/09/2018 @ 14:00!마르투스06/10/2018 @ 17:00 -> 06/10/2018 @ 18:00!아웃팅06/15/2018 @ 12:00 -> 06/15/2018 @ 13:00!마르투스06/16/2018 @ 12:00 -> 06/16/2018 @ 13:00!노말투06/23/2018 @ 12:00 -> 06/23/2018 @ 13:00!노말투07/01/2018 @ 12:00 -> 07/01/2018 @ 13:00!여름수련회07/06/2018 @ 12:00 -> 07/06/2018 @ 13:00!말투07/13/2018 @ 12:00 -> 07/13/2018 @ 13:00!말투07/18/2018 @ 12:30 -> 07/18/2018 @ 13:30!Hack Reactor07/21/2018 @ 12:00 -> 07/21/2018 @ 13:00!말투07/21/2018 @ 14:30 -> 07/21/2018 @ 16:00>271b73e451d327d95cdf74355b3bef6b0ea52b52 !NEW LOCATION: Saturday Learn Japanese: For English native/advanced speakers07/21/2018 @ 17:30 -> 07/21/2018 @ 19:00>23ff21c24177f246d3d4675b66378a3fe9a74dc6 !NEW LOCATION: Saturday Learn Japanese: For English native/advanced speakers07/25/2018 @ 09:00 -> 07/25/2018 @ 10:00>bff8cc8976ac750145cf6c76f26f351f6a4570d5 !Si Yong Kim - Fullstack Academy Meeting07/28/2018 @ 12:00 -> 07/28/2018 @ 13:00!말투미팅07/28/2018 @ 14:00 -> 07/28/2018 @ 15:00!온두라스08/03/2018 @ 09:00 -> 08/03/2018 @ 10:00!말투리드08/11/2018 @ 10:00 -> 08/11/2018 @ 13:00>271b73e451d327d95cdf74355b3bef6b0ea52b52 !Bitmaker General Assembly: Intro to UX Design08/11/2018 @ 12:00 -> 08/11/2018 @ 13:00!말투미팅08/13/2018 @ 19:20 -> 08/13/2018 @ 19:40>192559c4431d6b872fb6bf44ac55ee33b096d426 !1:1 with your Precourse HiR (David Kim)08/17/2018 @ 12:00 -> 08/17/2018 @ 13:00!말투리드08/21/2018 @ 10:30 -> 08/21/2018 @ 11:30>26f72a4f143482ca6679d8a140aed7c495a8c2a4 !HRSF Counselor Check (September Immersive) [Group 2] (Sophie Leroi)09/16/2018 @ 07:05 -> 09/16/2018 @ 12:25>271b73e451d327d95cdf74355b3bef6b0ea52b52 !Flight to Los Angeles (DL 7091)09/16/2018 @ 15:20 -> 09/16/2018 @ 16:52>271b73e451d327d95cdf74355b3bef6b0ea52b52 !Flight to San Francisco (DL 2436)10/04/2018 @ 12:30 -> 10/04/2018 @ 13:30>f6c4891256b403d4fdecae3ad7a4ec594ca203e3 !David Kim / Taehoon Kang10/15/2018 @ 16:45 -> 10/15/2018 @ 17:00>52b2a1b37940afd99422bcf6a1b47e765a863837 !David Goal Setting10/24/2018 @ 11:15 -> 10/24/2018 @ 11:30>bc94124f3df9f00df64f1229ffa24577a1522d76 !David Goal Setting10/24/2018 @ 11:15 -> 10/24/2018 @ 11:30>a8ec3ffca20836f9617c8f626da01561fb31c20f !David Goal Setting10/25/2018 @ 13:00 -> 10/25/2018 @ 14:00>271b73e451d327d95cdf74355b3bef6b0ea52b52 !Appointment with Bank of America10/25/2018 @ 13:00 -> 10/25/2018 @ 14:00>271b73e451d327d95cdf74355b3bef6b0ea52b52 !Banking appointment with Bank of America11/08/2018 @ 10:00 -> 11/08/2018 @ 11:00>17171dc03a87ff4482cbcae36a6d91432ba1b192 ![OPTIONAL] Proxy Talk11/13/2018 @ 17:15 -> 11/13/2018 @ 17:30>3b102bccede5ecfeebe8f0ef81fc0235f8d828cd !David Goal Setting11/13/2018 @ 17:15 -> 11/13/2018 @ 17:30>c6138cbd3c817ed29e9f0a416e6f6cdf085ede84 !David Goal Setting12/06/2018 @ 13:30 -> 12/06/2018 @ 14:15!SDC Final Conversation12/15/2018 @ 09:31 -> 12/15/2018 @ 13:49>271b73e451d327d95cdf74355b3bef6b0ea52b52 |Flight to Chicago (AA 2691)12/15/2018 @ 14:40 -> 12/15/2018 @ 16:20>271b73e451d327d95cdf74355b3bef6b0ea52b52 |Flight to Toronto (AA 3526)12/16/2018 @ 09:00 -> 12/16/2018 @ 11:00>7a8ba18bd9c15881886c42b19163fe1cfc0f986b !Triplebyte final technical interview01/05/2019 @ 09:00 -> 01/05/2019 @ 11:00>7a8ba18bd9c15881886c42b19163fe1cfc0f986b !Triplebyte final technical interview01/08/2019 @ 11:00 -> 01/08/2019 @ 11:30>bc7c0ebd189049f7b9924583d579095c9d31b8dc !David + Rich // Job Hunt Sync01/29/2019 @ 23:15 -> 01/30/2019 @ 04:47>271b73e451d327d95cdf74355b3bef6b0ea52b52 |Flight to New York City (AA 276)01/30/2019 @ 06:59 -> 01/30/2019 @ 08:52>271b73e451d327d95cdf74355b3bef6b0ea52b52 |Flight to Toronto (AA 3399)02/06/2019 @ 13:00 -> 02/06/2019 @ 13:30>edd9276c5c3d53add269968db3801428d215ff81 ![Reschedule -Si Yong(David) Kim/415-691-5310] phone chat with Janice about Google (David Kim)02/12/2019 @ 09:30 -> 02/12/2019 @ 13:57>4e7e2c9a7552b9c1aa72012d61a7d9055e7daeef |Flight to Chicago (AA 2691)06/01/2019 @ 19:00 -> 06/01/2019 @ 20:00!Mock up Interview training 06/24/2019 @ 08:00 -> 06/24/2019 @ 10:00>0a76a7fcfe5e8473a43aa12cb52d8e4b728f5a20 !Triplebyte final technical interview06/25/2019 @ 16:00 -> 06/25/2019 @ 17:00>d0cf5aa08145e3ddd7f994a2d44ce43734575a2b !Mock up interview06/26/2019 @ 08:00 -> 06/26/2019 @ 10:00>0a76a7fcfe5e8473a43aa12cb52d8e4b728f5a20 !Triplebyte final technical interview06/28/2019 @ 07:00 -> 06/28/2019 @ 09:00>0a76a7fcfe5e8473a43aa12cb52d8e4b728f5a20 !Triplebyte final technical interview06/30/2019 @ 08:30 -> 06/30/2019 @ 10:30>0a76a7fcfe5e8473a43aa12cb52d8e4b728f5a20 !Triplebyte final technical interview07/08/2019 @ 09:00 -> 07/08/2019 @ 19:00|Triplebyte: Available for interviews07/09/2019 @ 09:00 -> 07/09/2019 @ 09:30>d3183ba12b03a89f3637601c8e5cca020aeb4559 !Pitch call: Si <=> CoinTracker07/09/2019 @ 09:30 -> 07/09/2019 @ 19:00|Triplebyte: Available for interviews07/10/2019 @ 09:00 -> 07/10/2019 @ 09:45|Triplebyte: Available for interviews07/10/2019 @ 09:45 -> 07/10/2019 @ 10:15>6b969243166f0043db3e76ea180d1aa127ca0347 !Pitch call: Si <=> Alameda Research07/10/2019 @ 10:15 -> 07/10/2019 @ 10:30|Triplebyte: Available for interviews07/10/2019 @ 10:30 -> 07/10/2019 @ 11:00>bb019560ce738e04cc849cbd48ab48decfed64d0 !Pitch call: Si <=> Unit2107/10/2019 @ 11:00 -> 07/10/2019 @ 15:30|Triplebyte: Available for interviews07/10/2019 @ 15:30 -> 07/10/2019 @ 16:15>a540df4f069b552cb762a58176fe446a4d59735a !Pitch call: Si <=> Academia.edu07/10/2019 @ 16:15 -> 07/10/2019 @ 19:00|Triplebyte: Available for interviews07/11/2019 @ 09:00 -> 07/11/2019 @ 11:00|Triplebyte: Available for interviews07/11/2019 @ 11:00 -> 07/11/2019 @ 11:30>6b5e60968ae60ac47e3095dcc7351d3cfc16ec53 !Pitch call: Si <=> Skubana07/11/2019 @ 11:30 -> 07/11/2019 @ 13:00|Triplebyte: Available for interviews07/11/2019 @ 13:00 -> 07/11/2019 @ 13:30|Triplebyte: Available for interviews07/11/2019 @ 13:30 -> 07/11/2019 @ 14:00|Triplebyte: Available for interviews07/11/2019 @ 14:00 -> 07/11/2019 @ 14:30|Triplebyte: Available for interviews07/11/2019 @ 14:30 -> 07/11/2019 @ 16:30|Triplebyte: Available for interviews07/11/2019 @ 16:30 -> 07/11/2019 @ 17:00>33cf068fab23b9025b4f174433750b33bf64d71f !Pitch call: Si <=> Afterpay07/11/2019 @ 17:00 -> 07/11/2019 @ 19:00|Triplebyte: Available for interviews07/12/2019 @ 09:00 -> 07/12/2019 @ 14:00|Triplebyte: Available for interviews07/12/2019 @ 14:00 -> 07/12/2019 @ 14:30>39c2efbf120a0a7e621187781f87e10c144b8eea !Pitch call: Si <=> Determined AI07/12/2019 @ 14:30 -> 07/12/2019 @ 15:00>5a5601c36e241b7a1611dfbee3b24cc9760abbd6 !Pitch call: Si <=> Agora Systems07/12/2019 @ 15:00 -> 07/12/2019 @ 19:00|Triplebyte: Available for interviews07/15/2019 @ 09:00 -> 07/15/2019 @ 19:00|Triplebyte: Available for interviews07/15/2019 @ 14:00 -> 07/15/2019 @ 14:15>f02c45c9c4f2b274084c9971466ff12c9a7fbf4b !Si Yong Kim and Kevin Landucci07/16/2019 @ 09:00 -> 07/16/2019 @ 11:00|Triplebyte: Available for interviews07/16/2019 @ 11:00 -> 07/16/2019 @ 11:45>3d8243a75e91282635eb9c5f0e26d4269e3b8609 !Pitch call: Si <=> Raya07/16/2019 @ 11:45 -> 07/16/2019 @ 13:30|Triplebyte: Available for interviews07/16/2019 @ 13:30 -> 07/16/2019 @ 14:00>b0339d92cb88da77b7b1ed9a9bbbe3d21e243e0c !Pitch call: Si <=> Bolt07/16/2019 @ 14:00 -> 07/16/2019 @ 19:00|Triplebyte: Available for interviews07/17/2019 @ 09:00 -> 07/17/2019 @ 14:00|Triplebyte: Available for interviews07/17/2019 @ 14:00 -> 07/17/2019 @ 15:00>6a2ed9dc54461890c43faf1b3e0c56f293f27ce4 !Mock up Interview07/17/2019 @ 15:00 -> 07/17/2019 @ 19:00|Triplebyte: Available for interviews07/18/2019 @ 09:00 -> 07/18/2019 @ 13:00|Triplebyte: Available for interviews07/18/2019 @ 13:00 -> 07/18/2019 @ 13:30>a5ed914197bb37a16cd49cf5c43d32b95ec73fcf !Pitch call: Si <=> Zeus07/18/2019 @ 13:30 -> 07/18/2019 @ 14:00>e9044ee64e7904c1b21b299c8b687a3291119082 !Pitch call: Si <=> Divvy Homes07/18/2019 @ 14:00 -> 07/18/2019 @ 19:00|Triplebyte: Available for interviews07/19/2019 @ 09:00 -> 07/19/2019 @ 13:30|Triplebyte: Available for interviews07/19/2019 @ 13:30 -> 07/19/2019 @ 14:00>8f927d56d2368a8055c26138c877b7434620dd4d !Pitch call: Si <=> Avvir07/19/2019 @ 14:00 -> 07/19/2019 @ 19:00|Triplebyte: Available for interviews07/24/2019 @ 09:55 -> 07/24/2019 @ 15:21>052335fd09bc7beb5548ef545737cd61742a8a6f |Flight to San Francisco (AC 757)07/25/2019 @ 09:15 -> 07/25/2019 @ 18:15>730dd0ee19a0b8aab5ccd24cfc32571b5b5d1c6e !Jr. FSE Onsite Interview with Academia.edu07/26/2019 @ 10:45 -> 07/26/2019 @ 13:45!Si Yong Kim (David) @ Unit21 on-site interview07/29/2019 @ 09:00 -> 07/29/2019 @ 16:15|Triplebyte: Available for interviews07/31/2019 @ 09:00 -> 07/31/2019 @ 16:15|Triplebyte: Available for interviews08/01/2019 @ 10:00 -> 08/01/2019 @ 13:00>fd76b277d1977a9212a79ded74f6d52b0fa52669 !Interview with Divvy Homes08/02/2019 @ 09:00 -> 08/02/2019 @ 09:15>5a76cdf538a91c94de7ad276554dc0198833c0e2 !Quick sync08/02/2019 @ 11:45 -> 08/02/2019 @ 16:17>052335fd09bc7beb5548ef545737cd61742a8a6f |Flight to Toronto (AC 792)08/02/2019 @ 14:55 -> 08/02/2019 @ 16:24>803cdfb4806a962133bae7d25c1e3a832a8cb33a !Flight from Toronto to New York, departing at 20h55 (local time) - Booked on 31-Jul,201908/02/2019 @ 17:55 -> 08/02/2019 @ 19:24>c93ad7d17379a2e7fddbb216d6c23150e63f1094 |Flight to New York (AC 728)08/03/2019 @ 17:30 -> 08/03/2019 @ 18:30>b30fc774a9b16920949e0bf736c711059c72d57c !Reservation at Smoke Jazz and Supper Club08/05/2019 @ 08:30 -> 08/05/2019 @ 10:30!David <> Skubana Onsite08/07/2019 @ 14:00 -> 08/07/2019 @ 14:30>719f17d66837d8919b418c1c26ff2c0599ebe632 !David <> Neil08/08/2019 @ 09:45 -> 08/08/2019 @ 14:15>c51fc291cd8ea938d135f2e066f25369a48d53f1 !Bolt Onsite: Si Yong Kim08/09/2019 @ 10:00 -> 08/09/2019 @ 10:30>1d5321f9d5ec3e34b25c121027ae1f0aea5ddc48 !Chat with Adri! (David Kim)08/09/2019 @ 13:45 -> 08/09/2019 @ 14:00>df4a8a7a903a441583e0fefbfca5efb0fde2aac8 !David <> Katrina08/13/2019 @ 11:00 -> 08/13/2019 @ 11:30>75d97c15d9bf25358740357e5b9612ea942dc565 !Si Yong Kim and Krista Lane08/27/2019 @ 08:45 -> 08/27/2019 @ 10:37>b3b07e6fc6f02be6689c9a9d28edaac3d9d25866 |Flight to Chicago (AA 3236)08/27/2019 @ 13:00 -> 08/27/2019 @ 17:37>b3b07e6fc6f02be6689c9a9d28edaac3d9d25866 |Flight to San Francisco (AA 2639)08/30/2019 @ 10:30 -> 08/30/2019 @ 11:00!David <> Katrina09/03/2019 @ 07:00 -> 09/03/2019 @ 10:41>b3b07e6fc6f02be6689c9a9d28edaac3d9d25866 |Flight to Dallas (AA 440)09/03/2019 @ 11:46 -> 09/03/2019 @ 14:45>b3b07e6fc6f02be6689c9a9d28edaac3d9d25866 |Flight to Toronto (AA 1111)09/03/2019 @ 12:00 -> 09/03/2019 @ 14:00!Service with all green09/10/2019 @ 13:30 -> 09/10/2019 @ 14:00!Si Yong <> Katrina09/12/2019 @ 12:30 -> 09/12/2019 @ 13:00!Si Yong Kim09/18/2019 @ 18:00 -> 09/18/2019 @ 21:30>bd26e2dad900b5d2d67e8a36e6758d28ae1ba881 !Project Night at Optimizely09/18/2019 @ 18:00 -> 09/18/2019 @ 21:30>9757d42714b71b562a0ba5da47909d925642246b !Project Night at Optimizely09/19/2019 @ 18:30 -> 09/19/2019 @ 21:30>4adca30f6ba14e590679fcd926ad401009bca96f !International Party & Language Exchange (THURSDAYS)09/25/2019 @ 09:00 -> 09/25/2019 @ 10:34>9dd0b9c060f939c997eacab2f2d81f7e0d03e2cc |Flight to Los Angeles (AA 1322)09/25/2019 @ 11:30 -> 09/25/2019 @ 16:20>9dd0b9c060f939c997eacab2f2d81f7e0d03e2cc |Flight to Charlotte (AA 1507)09/25/2019 @ 19:06 -> 09/25/2019 @ 21:03>9dd0b9c060f939c997eacab2f2d81f7e0d03e2cc |Flight to Toronto (AA 5705)09/29/2019 @ 04:00 -> 09/29/2019 @ 07:24>303eecc97134816ad2df69d0f4429bf5cafa8a6d |Flight to Dallas (AA 1169)09/29/2019 @ 10:39 -> 09/29/2019 @ 13:56>303eecc97134816ad2df69d0f4429bf5cafa8a6d |Flight to Los Angeles (AA 1331)09/29/2019 @ 15:06 -> 09/29/2019 @ 16:28>303eecc97134816ad2df69d0f4429bf5cafa8a6d |Flight to San Francisco (AA 6040)10/03/2011 [1] 쓰르라미01/22/2016 [1] HMB499Y1 presentation02/22/2016 [1] CSB349 Term Test 102/22/2016 [1] HMB202 Midterm03/01/2016 [1] BIO220 midterm03/03/2016 [1] CSB351Y1 term test03/09/2016 [1] Applications must be done by this day04/04/2016 [1] CSB349 Term Test 205/16/2016 [1] AO Toronto Chapter07/25/2019 [1] On site with Academia.edu07/26/2019 [1] On site with Unit2107/30/2019 [1] On site with Determined AI08/01/2019 [1] On site with Divvy Homes08/05/2019 [1] On site with Skubana08/08/2019 [1] On site with Bolt,V
4/rQEyL-X_tWhhHmS0cK_LgQaUCU4NJRJgwjnDqY85eR9drrQZtDGOfHJHzV-iCgdO7q5ZSQLj1SrJ6vOKY7siQB0,v
        statuscode = ,V
        status,V
    statusnode = node.find("./D:status", namespaces=nsmap)    if statusnode is not None:        status = re.match(r'HTTP.*(\d\d\d)', statusnode.text)        if status is None:            die_atnode('Could not parse status.', node)        statuscode = status.group(1)        if statuscode == '404':            print('Skipping missing item: {}'.format(href))            continue,V
0tb61cu1e5jcgpujq5ndo,v
0tb61cu1e5jcgpujq5ndo,v
4/rQHMYqOtInDaXjx22B4zMaBu_rksPorOVmGX8hgQ2aV-pFvUoSZxHx4EecNIJt7GWm4C1_3WLahtJstdrm8VAQU,v
y,v
,todo,v
#,v
 ,v
your_client_secret,v
our_client_id,v
https://www.googleapis.com/auth/calendar,v
https://example.com/resource/scope,v
path/to/calendar/on/the/server/,v
apidata.googleusercontent.com,v
p,v
some.hostname.com,v
basic,v
# Type of authentication to use. Must be "basic" or "oauth2",V
1 #If you want to synchronize calcurse with a CalDAV server using                                                                   2 # calcurse-caldav, create a new directory ~/.calcurse/caldav/, copy this file  3 # to ~/.calcurse/caldav/config and adjust the configuration below.  4   5 [General]  6 # Path to the calcurse binary that is used for importing/exporting items.  7 Binary = calcurse  8   9 # Host name of the server that hosts CalDAV. 10 Hostname = www.google.com 11  12 # Path to the CalDAV calendar on the host specified above. 13 Path = /calendar/dav 14  15 # Enable this if you want to skip SSL certificate checks. 16 InsecureSSL = No 17  18 # Disable this option to actually enable synchronization. If it is enabled, 19 # nothing is actually written to the server or to the local data files. If you 20 # combine DryRun = Yes with Verbose = Yes, you get a log of what would have 21 # happened with this option disabled. 22 DryRun = Yes 23  24 # Enable this if you want detailed logs written to stdout. 25 Verbose = Yes 26  27 # Credentials for HTTP Basic Authentication. Leave this commented out if you do 28 # not want to use authentication. 29 [Auth] 30 Username = [redacted]@gmail.com 31 Password = [redacted],v
weekly,v
monthly,v
l",v
Anton Vynogradenko,V
                                  ,V
" move around buffer:nmap <leader>l :bnext<CR>:nmap <leader>h :bprevious<CR>,V
let g:airline#extensions#tabline#enabled = 1,V
<S-Tab>,v
Tab,v
nnoremap,v
:nnoremap <Tab> :bnext<CR>:nnoremap <S-Tab> :bprevious<CR>,v
" move around ,V
" no bottom status barset noshowmodeset norulerset laststatus=0set noshowcmdset cmdheight=0,V
" no bottom status barset noshowmodeset norulerset laststatus=0set noshowcmdset cmdheight=1,V
set laststatus=1,V
;,v
>,v
*,v
<,v
<,V
* enable/disable ale integration >  let g:airline#extensions#ale#enabled = 1* ale error_symbol >  let airline#extensions#ale#error_symbol = 'E:'<* ale warning >  let airline#extensions#ale#warning_symbol = 'W:'* ale show_line_numbers >  let airline#extensions#ale#show_line_numbers = 1<* ale open_lnum_symbol >  let airline#extensions#ale#open_lnum_symbol = '(L'<* ale close_lnum_symbol >  let airline#extensions#ale#close_lnum_symbol = ')',v
unicode,v
let g:airline_symbols.dirty=⚡,V
  " powerline symbols,V
" ============================================================================,v
  let g:airline_symbols.linenr = '☰'  let g:airline_symbols.linenr = '␊'  let g:airline_symbols.paste = 'ρ'  let g:airline_symbols.paste = 'Þ'  let g:airline_symbols.paste = '∥'  let g:airline_symbols.spell = 'Ꞩ'  let g:airline_symbols.notexists = 'Ɇ'  let g:airline_symbols.whitespace = 'Ξ',V
⎇,v
  let g:airline_symbols.linenr = '☰'  let g:airline_symbols.linenr = '␊',V
" unicode symbols  let g:airline_left_sep = '»'  let g:airline_left_sep = '▶'  let g:airline_right_sep = '«'  let g:airline_right_sep = '◀'  let g:airline_symbols.crypt = '🔒'  let g:airline_symbols.linenr = '☰'  let g:airline_symbols.linenr = '␊'  let g:airline_symbols.linenr = '␤'  let g:airline_symbols.linenr = '¶'  let g:airline_symbols.maxlinenr = ''  let g:airline_symbols.maxlinenr = '㏑'  let g:airline_symbols.branch = '⎇'  let g:airline_symbols.paste = 'ρ'  let g:airline_symbols.paste = 'Þ'  let g:airline_symbols.paste = '∥'  let g:airline_symbols.spell = 'Ꞩ'  let g:airline_symbols.notexists = 'Ɇ'  let g:airline_symbols.whitespace = 'Ξ',v
30,v
2,v
%<[y?%<[m?%<[d?%[%H:%M ]&%[%a %d]>&%[%b %d]>&%[%m/%y ]>,v
{%b %d},v
let g:airline_powerline_fonts = 0,V
let g:airline_theme = 'gruvbox',V
let g:airline#extensions#whitespace#enabled = 0,V
" to use fancy symbols for airline, uncomment the following lines and use a,V
" patched font (more info on the README.rst),V
if !exists('g:airline_symbols'),V
  let g:airline_symbols = {},V
endif,V
let g:airline_left_sep = '⮀'let g:airline_left_alt_sep = '⮁'let g:airline_right_sep = '⮂'let g:airline_right_alt_sep = '⮃'let g:airline_symbols.branch = '⭠'let g:airline_symbols.readonly = '⭤'let g:airline_symbols.linenr = '⭡',V
Hotkeys Project Terminal Transparent Topre 6u Spacebar,v
  TIMESTAMP '2019-04-01 10:18:00',,V
,,v
TIMESTAMP '2019-01',V
  TIMESTAMP '2019-01-02 03:15:00',,V
  'FMMonth ',V
  'FMMonth FMDDth at FMHH:FMMI',V
),V
D,v
9,v
/,v
  --  ' ',,V
',v
0,v
    now(),,V
    '2019/01/02 03:15:00',,V
  ),V
  CONCAT(,V
    CONCAT    (      TRIM()    ),V
      ,V
'Month ',v
),v
current_date,v
